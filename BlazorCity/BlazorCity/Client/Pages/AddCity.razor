@page "/addcity"

@inject HttpClient Http
@inject NavigationManager NavigationManager

<EditForm Model="@newCity" OnValidSubmit="AddCityToDb">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container-fluid">
        <div class="row">
            <div class="col">

                <table class="table table-striped">
                    <thead class="table-dark">
                        <tr>
                            <th scope="col">Название города</th>
                            <th scope="col">Население</th>
                            <th scope="col">Дата основания города</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <input class="form-control" @bind-value="newCity.CityName" />
                            </td>
                            <td>
                                <input class="form-control" @bind-value="newCity.CityPopulation" />
                            </td>
                            <td>
                                <input class="form-control" type="date"
                                       @bind-value="@cityDate"
                                       min="0000-01-01" max="@value" />
                            </td>
                        </tr>
                    </tbody>
                </table>

                <div class="row">
                    <div class="col">
                        <button type="submit" class="btn btn-success" disabled="@(!IsConnected)">Добавить город</button>
                    </div>
                    <div class="col">
                        <button type="submit" class="btn btn-danger" @onclick="@Cancel">Отмена</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private City newCity = new City();

    DateTime? value = DateTime.Now;
    DateTime? cityDate;
    string date;

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {

        HubConnection();

        await hubConnection.StartAsync();
    }

    private void HubConnection()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/CityHub"))
        .Build();
    }

    public async Task AddCityToDb()
    {
        date = cityDate?.ToString("yyyyMMdd");

        if (date == null)
        {
            newCity.CityFoundationYear = newCity.CityDoundationMonth = newCity.CityDoundationDay = 0;
        }
        else
        {
            newCity.CityFoundationYear = Int32.Parse(date.Substring(0, 4));
            newCity.CityDoundationMonth = Int32.Parse(date.Substring(4, 2));
            newCity.CityDoundationDay = Int32.Parse(date.Substring(6));
        }

        await AddCityData(newCity);

        NavigationManager.NavigateTo("");
    }

    Task AddCityData(City city)
    {
        return hubConnection.SendAsync("SendAddCity", city);
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("");
    }

}